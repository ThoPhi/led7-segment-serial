
DigitalClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000003aa  0000041e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080006a  000003b4  00000428  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000014f  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000427  00000000  00000000  000005d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000274  00000000  00000000  000009fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000588  00000000  00000000  00000c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c5  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a9  00000000  00000000  000014b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000155a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	84 c0       	rjmp	.+264    	; 0x11a <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__vector_10>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ea       	ldi	r30, 0xAA	; 170
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a7 37       	cpi	r26, 0x77	; 119
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	33 d0       	rcall	.+102    	; 0xc0 <main>
  5a:	a5 c1       	rjmp	.+842    	; 0x3a6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_10>:
	if(CountTimer >= 10){
		update_buffer();
	}
}
ISR(SPI_STC_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
	
}
  68:	0f 90       	pop	r0
  6a:	0f be       	out	0x3f, r0	; 63
  6c:	0f 90       	pop	r0
  6e:	1f 90       	pop	r1
  70:	18 95       	reti

00000072 <delay_us>:
void init_Atmega8();
void delay_us(unsigned long duration)
{
  72:	08 95       	ret

00000074 <init_Atmega8>:
		
	}
	return 0;
}
void init_Atmega8()
{
  74:	18 ba       	out	0x18, r1	; 24
	// Input/Output Ports initialization
	// Port B initialization
	// Func7=In Func6=In Func5=Out Func4=In Func3=Out Func2=Out Func1=In Func0=In 
	// State7=T State6=T State5=0 State4=T State3=0 State2=0 State1=T State0=T 
	PORTB=0x00;
	DDRB=0x2C;
  76:	8c e2       	ldi	r24, 0x2C	; 44
  78:	87 bb       	out	0x17, r24	; 23
	
	// Port C initialization
	// Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
	// State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
	PORTC=0x00;
  7a:	15 ba       	out	0x15, r1	; 21
	DDRC=0x00;
  7c:	14 ba       	out	0x14, r1	; 20
	
	// Port D initialization
	// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
	// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
	PORTD=0x00;
  7e:	12 ba       	out	0x12, r1	; 18
	DDRD=0x00;
  80:	11 ba       	out	0x11, r1	; 17
	
	// Timer/Counter 0 initialization
	// Clock source: System Clock
	// Clock value: 1000.000 kHz
	TCCR0=0x02;
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
  86:	12 be       	out	0x32, r1	; 50
	// Input Capture on Falling Edge
	// Timer 1 Overflow Interrupt: On
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	TCCR1A=0x00;
  88:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x02;
  8a:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
  8c:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
  8e:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
  90:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
  92:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x00;
  94:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=0x00;
  96:	1a bc       	out	0x2a, r1	; 42
	OCR1BH=0x00;
  98:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
  9a:	18 bc       	out	0x28, r1	; 40
	// Timer/Counter 2 initialization
	// Clock source: System Clock
	// Clock value: Timer 2 Stopped
	// Mode: Normal top=FFh
	// OC2 output: Disconnected
	ASSR=0x00;
  9c:	12 bc       	out	0x22, r1	; 34
	TCCR2=0x00;
  9e:	15 bc       	out	0x25, r1	; 37
	TCNT2=0x00;
  a0:	14 bc       	out	0x24, r1	; 36
	OCR2=0x00;
  a2:	13 bc       	out	0x23, r1	; 35
	
	// External Interrupt(s) initialization
	// INT0: Off
	// INT1: Off
	MCUCR=0x00;
  a4:	15 be       	out	0x35, r1	; 53
	
	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK=0x04;
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	89 bf       	out	0x39, r24	; 57
	
	// Analog Comparator initialization
	// Analog Comparator: Off
	// Analog Comparator Input Capture by Timer/Counter 1: Off
	ACSR=0x80;
  aa:	80 e8       	ldi	r24, 0x80	; 128
  ac:	88 b9       	out	0x08, r24	; 8
	SFIOR=0x00;
  ae:	10 be       	out	0x30, r1	; 48
	// ADC initialization
	// ADC Clock frequency: 1000.000 kHz
	// ADC Voltage Reference: AREF pin
	// Only the 8 most significant bits of
	// the AD conversion result are used
	ADMUX=ADC_VREF_TYPE & 0xff;
  b0:	80 e2       	ldi	r24, 0x20	; 32
  b2:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0x8B;
  b4:	8b e8       	ldi	r24, 0x8B	; 139
  b6:	86 b9       	out	0x06, r24	; 6
	// SPI Type: Master
	// SPI Clock Rate: 2000.000 kHz
	// SPI Clock Phase: Cycle Half
	// SPI Clock Polarity: Low
	// SPI Data Order: MSB First
	SPCR=0xD0;
  b8:	80 ed       	ldi	r24, 0xD0	; 208
  ba:	8d b9       	out	0x0d, r24	; 13
	SPSR=0x00;
  bc:	1e b8       	out	0x0e, r1	; 14
//#endasm
	
	// Global enable interrupts
//#asm("sei")

}
  be:	08 95       	ret

000000c0 <main>:
{
	unsigned long i;
	for(i=0;i<duration;i++);
}
int main(void)
{
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
unsigned char LedIndex=1;
	init_Atmega8();
  c8:	d5 df       	rcall	.-86     	; 0x74 <init_Atmega8>
	init_SPI();
  ca:	5a d0       	rcall	.+180    	; 0x180 <init_SPI>
	init_LED7();
  cc:	61 d0       	rcall	.+194    	; 0x190 <init_LED7>
	SELECT_ON;
  ce:	c2 98       	cbi	0x18, 2	; 24
		SPI_write(0xaa);
  d0:	8a ea       	ldi	r24, 0xAA	; 170
  d2:	59 d0       	rcall	.+178    	; 0x186 <SPI_write>
	SELECT_OFF;
  d4:	c2 9a       	sbi	0x18, 2	; 24
  d6:	81 e0       	ldi	r24, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d8:	08 ec       	ldi	r16, 0xC8	; 200
  da:	10 e0       	ldi	r17, 0x00	; 0
  dc:	20 e1       	ldi	r18, 0x10	; 16
  de:	37 e2       	ldi	r19, 0x27	; 39
  e0:	d8 01       	movw	r26, r16
  e2:	11 97       	sbiw	r26, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ea:	d1 f7       	brne	.-12     	; 0xe0 <main+0x20>
	while(1){
		//delay_us(800000);
		_delay_ms(1000);
		SELECT_ON;
  ec:	c2 98       	cbi	0x18, 2	; 24
		
		//SPI_write(0xff);
		//SPI_write(0xff);
		SPI_write(~(led7_data[LedIndex]));
  ee:	c8 2f       	mov	r28, r24
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	fe 01       	movw	r30, r28
  f4:	e0 5a       	subi	r30, 0xA0	; 160
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	80 81       	ld	r24, Z
  fa:	80 95       	com	r24
  fc:	44 d0       	rcall	.+136    	; 0x186 <SPI_write>
		SELECT_OFF;
  fe:	c2 9a       	sbi	0x18, 2	; 24
 100:	80 e1       	ldi	r24, 0x10	; 16
 102:	97 e2       	ldi	r25, 0x27	; 39
 104:	f8 01       	movw	r30, r16
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10c:	d9 f7       	brne	.-10     	; 0x104 <main+0x44>
		LedIndex = (LedIndex + 1)%10;
 10e:	ce 01       	movw	r24, r28
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	6a e0       	ldi	r22, 0x0A	; 10
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	20 d1       	rcall	.+576    	; 0x358 <__divmodhi4>
 118:	e1 cf       	rjmp	.-62     	; 0xdc <main+0x1c>

0000011a <__vector_8>:
unsigned char led7_data[10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};

unsigned int CountTimer;
//function
ISR(TIMER1_OVF_vect	)//ngat sau moi 1 ms
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	7f 93       	push	r23
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	TCNT1H = (0xe0);//-8000
 13c:	80 ee       	ldi	r24, 0xE0	; 224
 13e:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = (0xc0);
 140:	80 ec       	ldi	r24, 0xC0	; 192
 142:	8c bd       	out	0x2c, r24	; 44
	scan_led();
 144:	ee d0       	rcall	.+476    	; 0x322 <scan_led>

	CountTimer++;
 146:	80 91 6e 00 	lds	r24, 0x006E
 14a:	90 91 6f 00 	lds	r25, 0x006F
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	90 93 6f 00 	sts	0x006F, r25
 154:	80 93 6e 00 	sts	0x006E, r24
	if(CountTimer >= 10){
 158:	0a 97       	sbiw	r24, 0x0a	; 10
 15a:	08 f0       	brcs	.+2      	; 0x15e <__vector_8+0x44>
		update_buffer();
 15c:	cb d0       	rcall	.+406    	; 0x2f4 <update_buffer>
	}
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	bf 91       	pop	r27
 164:	af 91       	pop	r26
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	7f 91       	pop	r23
 16c:	6f 91       	pop	r22
 16e:	5f 91       	pop	r21
 170:	4f 91       	pop	r20
 172:	3f 91       	pop	r19
 174:	2f 91       	pop	r18
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <init_SPI>:
/*////////////////////////////////////////*/
#include <avr/io.h>
#include "SPI.h"

void init_SPI()
{
 180:	08 95       	ret

00000182 <SPI_read>:
	//already
}
unsigned char SPI_read()
{
 182:	8f b1       	in	r24, 0x0f	; 15
	unsigned char SPIData;
	SPIData = SPDR;
	return SPIData;
}
 184:	08 95       	ret

00000186 <SPI_write>:
unsigned char SPI_write(unsigned char WriteData)
{
 186:	8f b9       	out	0x0f, r24	; 15
	SPDR = WriteData;
	while(!(SPSR & (1<<SPIF)));
 188:	77 9b       	sbis	0x0e, 7	; 14
 18a:	fe cf       	rjmp	.-4      	; 0x188 <SPI_write+0x2>
	return SPDR;
 18c:	8f b1       	in	r24, 0x0f	; 15
}
 18e:	08 95       	ret

00000190 <init_LED7>:
//unsigned char led7_data[10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
unsigned char ScanBuffer[4] = {0x00, 0x00, 0x00, 0x00};
unsigned char Year,Month,Day, Hour,Minute,Second, Tick;
//function
void init_LED7()
{
 190:	10 92 71 00 	sts	0x0071, r1
	Hour = 0;
	Minute = 0;
 194:	10 92 72 00 	sts	0x0072, r1
	Second = 0;
 198:	10 92 70 00 	sts	0x0070, r1
	Tick = 0;
 19c:	10 92 76 00 	sts	0x0076, r1
}
 1a0:	08 95       	ret

000001a2 <clock_tick>:
	SPI_write(ScanBuffer[1]);
	SPI_write(ScanBuffer[0]);
	SELECT_OFF;
}
void clock_tick()
{
 1a2:	80 91 76 00 	lds	r24, 0x0076
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	80 93 76 00 	sts	0x0076, r24
	Tick++;
	if(Tick>=100){
 1ac:	84 36       	cpi	r24, 0x64	; 100
 1ae:	08 f4       	brcc	.+2      	; 0x1b2 <clock_tick+0x10>
 1b0:	a0 c0       	rjmp	.+320    	; 0x2f2 <clock_tick+0x150>
		Tick = 0;
 1b2:	10 92 76 00 	sts	0x0076, r1
		Second ++;
 1b6:	80 91 70 00 	lds	r24, 0x0070
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	80 93 70 00 	sts	0x0070, r24
		if(Second >=60){
 1c0:	8c 33       	cpi	r24, 0x3C	; 60
 1c2:	08 f4       	brcc	.+2      	; 0x1c6 <clock_tick+0x24>
 1c4:	96 c0       	rjmp	.+300    	; 0x2f2 <clock_tick+0x150>
			Second = 0;
 1c6:	10 92 70 00 	sts	0x0070, r1
			Minute ++;
 1ca:	80 91 72 00 	lds	r24, 0x0072
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
 1d0:	80 93 72 00 	sts	0x0072, r24
			if(Minute >= 60){
 1d4:	8c 33       	cpi	r24, 0x3C	; 60
 1d6:	08 f4       	brcc	.+2      	; 0x1da <clock_tick+0x38>
 1d8:	8c c0       	rjmp	.+280    	; 0x2f2 <clock_tick+0x150>
				Minute =0;
 1da:	10 92 72 00 	sts	0x0072, r1
				Hour++;
 1de:	80 91 71 00 	lds	r24, 0x0071
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	80 93 71 00 	sts	0x0071, r24
				if(Hour >= 24){
 1e8:	88 31       	cpi	r24, 0x18	; 24
 1ea:	08 f4       	brcc	.+2      	; 0x1ee <clock_tick+0x4c>
 1ec:	82 c0       	rjmp	.+260    	; 0x2f2 <clock_tick+0x150>
					Hour = 0;
 1ee:	10 92 71 00 	sts	0x0071, r1
					Day ++;
 1f2:	50 91 73 00 	lds	r21, 0x0073
 1f6:	5f 5f       	subi	r21, 0xFF	; 255
 1f8:	50 93 73 00 	sts	0x0073, r21
					if((Month == 1)| (Month == 3)|(Month == 5)|(Month == 7)|(Month == 8)|(Month == 10)|(Month == 12)){
 1fc:	40 91 75 00 	lds	r20, 0x0075
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	47 30       	cpi	r20, 0x07	; 7
 206:	11 f4       	brne	.+4      	; 0x20c <clock_tick+0x6a>
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	45 30       	cpi	r20, 0x05	; 5
 212:	11 f4       	brne	.+4      	; 0x218 <clock_tick+0x76>
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	28 2b       	or	r18, r24
 21a:	39 2b       	or	r19, r25
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	48 30       	cpi	r20, 0x08	; 8
 222:	11 f4       	brne	.+4      	; 0x228 <clock_tick+0x86>
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	28 2b       	or	r18, r24
 22a:	39 2b       	or	r19, r25
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	4a 30       	cpi	r20, 0x0A	; 10
 232:	11 f4       	brne	.+4      	; 0x238 <clock_tick+0x96>
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	28 2b       	or	r18, r24
 23a:	39 2b       	or	r19, r25
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	4c 30       	cpi	r20, 0x0C	; 12
 242:	11 f4       	brne	.+4      	; 0x248 <clock_tick+0xa6>
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	28 2b       	or	r18, r24
 24a:	39 2b       	or	r19, r25
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	09 f4       	brne	.+2      	; 0x254 <clock_tick+0xb2>
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	43 30       	cpi	r20, 0x03	; 3
 258:	09 f4       	brne	.+2      	; 0x25c <clock_tick+0xba>
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	89 2b       	or	r24, r25
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	28 2b       	or	r18, r24
 262:	39 2b       	or	r19, r25
 264:	23 2b       	or	r18, r19
 266:	19 f0       	breq	.+6      	; 0x26e <clock_tick+0xcc>
						if(Day >=31){
 268:	5f 31       	cpi	r21, 0x1F	; 31
 26a:	c0 f1       	brcs	.+112    	; 0x2dc <clock_tick+0x13a>
 26c:	1e c0       	rjmp	.+60     	; 0x2aa <clock_tick+0x108>
							Day = 0;
							Month ++;
						}
					}
					else if((Month == 4)|(Month == 6)|(Month == 9)|(Month == 11)){
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	4b 30       	cpi	r20, 0x0B	; 11
 274:	11 f4       	brne	.+4      	; 0x27a <clock_tick+0xd8>
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	49 30       	cpi	r20, 0x09	; 9
 280:	11 f4       	brne	.+4      	; 0x286 <clock_tick+0xe4>
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	28 2b       	or	r18, r24
 288:	39 2b       	or	r19, r25
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	44 30       	cpi	r20, 0x04	; 4
 28e:	09 f4       	brne	.+2      	; 0x292 <clock_tick+0xf0>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	46 30       	cpi	r20, 0x06	; 6
 296:	09 f4       	brne	.+2      	; 0x29a <clock_tick+0xf8>
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	89 2b       	or	r24, r25
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	28 2b       	or	r18, r24
 2a0:	39 2b       	or	r19, r25
 2a2:	23 2b       	or	r18, r19
 2a4:	41 f0       	breq	.+16     	; 0x2b6 <clock_tick+0x114>
						if(Day>= 30){
 2a6:	5e 31       	cpi	r21, 0x1E	; 30
 2a8:	c8 f0       	brcs	.+50     	; 0x2dc <clock_tick+0x13a>
							Day =0;
 2aa:	10 92 73 00 	sts	0x0073, r1
							Month ++;
 2ae:	4f 5f       	subi	r20, 0xFF	; 255
 2b0:	40 93 75 00 	sts	0x0075, r20
 2b4:	13 c0       	rjmp	.+38     	; 0x2dc <clock_tick+0x13a>
						}
					}
					else if (Month ==2){
 2b6:	42 30       	cpi	r20, 0x02	; 2
 2b8:	89 f4       	brne	.+34     	; 0x2dc <clock_tick+0x13a>
						if((Year %4) == 0){//nam nhuan
 2ba:	80 91 74 00 	lds	r24, 0x0074
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	83 70       	andi	r24, 0x03	; 3
 2c2:	90 70       	andi	r25, 0x00	; 0
 2c4:	89 2b       	or	r24, r25
 2c6:	19 f4       	brne	.+6      	; 0x2ce <clock_tick+0x12c>
							if(Day >=29){
 2c8:	5d 31       	cpi	r21, 0x1D	; 29
 2ca:	40 f0       	brcs	.+16     	; 0x2dc <clock_tick+0x13a>
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <clock_tick+0x130>
								Day = 0;
								Month++;
							}
						}
						else {
							if(Day >= 28){
 2ce:	5c 31       	cpi	r21, 0x1C	; 28
 2d0:	28 f0       	brcs	.+10     	; 0x2dc <clock_tick+0x13a>
								Day = 0;
 2d2:	10 92 73 00 	sts	0x0073, r1
								Month ++;
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	80 93 75 00 	sts	0x0075, r24
							}
						}
					}
					if(Month >= 13) {
 2dc:	80 91 75 00 	lds	r24, 0x0075
 2e0:	8d 30       	cpi	r24, 0x0D	; 13
 2e2:	38 f0       	brcs	.+14     	; 0x2f2 <clock_tick+0x150>
						Month =0;
 2e4:	10 92 75 00 	sts	0x0075, r1
						Year ++;		//happy new year :D
 2e8:	80 91 74 00 	lds	r24, 0x0074
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	80 93 74 00 	sts	0x0074, r24
 2f2:	08 95       	ret

000002f4 <update_buffer>:
			}
		}
	}		
}
void update_buffer()
{
 2f4:	56 df       	rcall	.-340    	; 0x1a2 <clock_tick>
	clock_tick();
	ScanBuffer[3] = Hour/10;
 2f6:	20 91 71 00 	lds	r18, 0x0071
 2fa:	82 2f       	mov	r24, r18
 2fc:	6a e0       	ldi	r22, 0x0A	; 10
 2fe:	20 d0       	rcall	.+64     	; 0x340 <__udivmodqi4>
 300:	80 93 6d 00 	sts	0x006D, r24
	ScanBuffer[2] = Hour%10;
 304:	82 2f       	mov	r24, r18
 306:	1c d0       	rcall	.+56     	; 0x340 <__udivmodqi4>
 308:	90 93 6c 00 	sts	0x006C, r25
	ScanBuffer[1] = Minute/10;
 30c:	20 91 72 00 	lds	r18, 0x0072
 310:	82 2f       	mov	r24, r18
 312:	16 d0       	rcall	.+44     	; 0x340 <__udivmodqi4>
 314:	80 93 6b 00 	sts	0x006B, r24
	ScanBuffer[0] = Minute%10;
 318:	82 2f       	mov	r24, r18
 31a:	12 d0       	rcall	.+36     	; 0x340 <__udivmodqi4>
 31c:	90 93 6a 00 	sts	0x006A, r25
}
 320:	08 95       	ret

00000322 <scan_led>:
	Minute = 0;
	Second = 0;
	Tick = 0;
}
void scan_led()
{
 322:	c2 98       	cbi	0x18, 2	; 24
	//unsigned char i;
	SELECT_ON;
	SPI_write(ScanBuffer[3]);
 324:	80 91 6d 00 	lds	r24, 0x006D
 328:	2e df       	rcall	.-420    	; 0x186 <SPI_write>
	SPI_write(ScanBuffer[2]);
 32a:	80 91 6c 00 	lds	r24, 0x006C
 32e:	2b df       	rcall	.-426    	; 0x186 <SPI_write>
	SPI_write(ScanBuffer[1]);
 330:	80 91 6b 00 	lds	r24, 0x006B
 334:	28 df       	rcall	.-432    	; 0x186 <SPI_write>
	SPI_write(ScanBuffer[0]);
 336:	80 91 6a 00 	lds	r24, 0x006A
 33a:	25 df       	rcall	.-438    	; 0x186 <SPI_write>
	SELECT_OFF;
 33c:	c2 9a       	sbi	0x18, 2	; 24
}
 33e:	08 95       	ret

00000340 <__udivmodqi4>:
 340:	99 1b       	sub	r25, r25
 342:	79 e0       	ldi	r23, 0x09	; 9
 344:	04 c0       	rjmp	.+8      	; 0x34e <__udivmodqi4_ep>

00000346 <__udivmodqi4_loop>:
 346:	99 1f       	adc	r25, r25
 348:	96 17       	cp	r25, r22
 34a:	08 f0       	brcs	.+2      	; 0x34e <__udivmodqi4_ep>
 34c:	96 1b       	sub	r25, r22

0000034e <__udivmodqi4_ep>:
 34e:	88 1f       	adc	r24, r24
 350:	7a 95       	dec	r23
 352:	c9 f7       	brne	.-14     	; 0x346 <__udivmodqi4_loop>
 354:	80 95       	com	r24
 356:	08 95       	ret

00000358 <__divmodhi4>:
 358:	97 fb       	bst	r25, 7
 35a:	09 2e       	mov	r0, r25
 35c:	07 26       	eor	r0, r23
 35e:	0a d0       	rcall	.+20     	; 0x374 <__divmodhi4_neg1>
 360:	77 fd       	sbrc	r23, 7
 362:	04 d0       	rcall	.+8      	; 0x36c <__divmodhi4_neg2>
 364:	0c d0       	rcall	.+24     	; 0x37e <__udivmodhi4>
 366:	06 d0       	rcall	.+12     	; 0x374 <__divmodhi4_neg1>
 368:	00 20       	and	r0, r0
 36a:	1a f4       	brpl	.+6      	; 0x372 <__divmodhi4_exit>

0000036c <__divmodhi4_neg2>:
 36c:	70 95       	com	r23
 36e:	61 95       	neg	r22
 370:	7f 4f       	sbci	r23, 0xFF	; 255

00000372 <__divmodhi4_exit>:
 372:	08 95       	ret

00000374 <__divmodhi4_neg1>:
 374:	f6 f7       	brtc	.-4      	; 0x372 <__divmodhi4_exit>
 376:	90 95       	com	r25
 378:	81 95       	neg	r24
 37a:	9f 4f       	sbci	r25, 0xFF	; 255
 37c:	08 95       	ret

0000037e <__udivmodhi4>:
 37e:	aa 1b       	sub	r26, r26
 380:	bb 1b       	sub	r27, r27
 382:	51 e1       	ldi	r21, 0x11	; 17
 384:	07 c0       	rjmp	.+14     	; 0x394 <__udivmodhi4_ep>

00000386 <__udivmodhi4_loop>:
 386:	aa 1f       	adc	r26, r26
 388:	bb 1f       	adc	r27, r27
 38a:	a6 17       	cp	r26, r22
 38c:	b7 07       	cpc	r27, r23
 38e:	10 f0       	brcs	.+4      	; 0x394 <__udivmodhi4_ep>
 390:	a6 1b       	sub	r26, r22
 392:	b7 0b       	sbc	r27, r23

00000394 <__udivmodhi4_ep>:
 394:	88 1f       	adc	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	5a 95       	dec	r21
 39a:	a9 f7       	brne	.-22     	; 0x386 <__udivmodhi4_loop>
 39c:	80 95       	com	r24
 39e:	90 95       	com	r25
 3a0:	bc 01       	movw	r22, r24
 3a2:	cd 01       	movw	r24, r26
 3a4:	08 95       	ret

000003a6 <_exit>:
 3a6:	f8 94       	cli

000003a8 <__stop_program>:
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <__stop_program>
